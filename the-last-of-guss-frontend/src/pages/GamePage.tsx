import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import React, { useCallback, useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { ApiError, apiService } from '../services/api';
import type { RoundWithStats, User } from '../types';

const GamePage: React.FC = () => {
  const { roundId } = useParams<{ roundId: string }>();
  const navigate = useNavigate();

  const [round, setRound] = useState<RoundWithStats | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [tapping, setTapping] = useState(false);
  const [error, setError] = useState<string>('');
  const [lastTapScore, setLastTapScore] = useState<number | null>(null);

  const loadRoundData = useCallback(async () => {
    if (!roundId) return;

    try {
      const [roundData, userData] = await Promise.all([
        apiService.getRound(roundId),
        apiService.getProfile().catch(() => null),
      ]);
      setRound(roundData.round);
      if (userData) setUser(userData);
    } catch (err) {
      if (err instanceof ApiError && err.statusCode === 401) {
        void navigate('/login');
      } else {
        setError(
          err instanceof ApiError ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—É–Ω–¥–∞',
        );
      }
    }
  }, [roundId, navigate]);

  useEffect(() => {
    void loadRoundData().finally(() => setLoading(false));
  }, [loadRoundData]);

  // Auto-refresh round data every 2 seconds
  useEffect(() => {
    if (!round) return;

    const interval = setInterval(() => {
      void loadRoundData();
    }, 2000);

    return () => clearInterval(interval);
  }, [round, loadRoundData]);

  const handleTap = async () => {
    if (!roundId || !round || round.status !== 'ACTIVE' || tapping) return;

    try {
      setTapping(true);
      setError('');

      const response = await apiService.tapRound(roundId);
      setLastTapScore(response.tapScore);

      // Update local score immediately for better UX
      setRound((prev) =>
        prev
          ? {
              ...prev,
              myScore: response.totalScore,
              totalTaps: prev.totalTaps + 1,
              totalScore: prev.totalScore + response.tapScore,
            }
          : null,
      );

      // Hide tap score after 1 second
      void setTimeout(() => setLastTapScore(null), 1000);
    } catch (err) {
      setError(err instanceof ApiError ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∞–ø–µ');
    } finally {
      setTapping(false);
    }
  };

  const formatTimeLeft = (timeLeft: number) => {
    const seconds = Math.max(0, Math.floor(timeLeft / 1000));
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds
      .toString()
      .padStart(2, '0')}`;
  };

  const getStatusDisplay = () => {
    if (!round) return { text: '–ó–∞–≥—Ä—É–∑–∫–∞...', color: 'text-muted-foreground' };

    switch (round.status) {
      case 'COOLDOWN':
        return {
          text: `–î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞: ${formatTimeLeft(round.timeLeft)}`,
          color: 'text-yellow-600',
        };
      case 'ACTIVE':
        return {
          text: `–†–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å: ${formatTimeLeft(round.timeLeft)}`,
          color: 'text-green-600',
        };
      case 'COMPLETED':
        return {
          text: '–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!',
          color: 'text-muted-foreground',
        };
      default:
        return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å', color: 'text-muted-foreground' };
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—É–Ω–¥–∞...</p>
        </div>
      </div>
    );
  }

  if (!round) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-destructive">–†–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</CardTitle>
            <CardDescription>–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω</CardDescription>
          </CardHeader>
          <CardContent>
            <Button asChild className="mt-2">
              <a href="/rounds">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É</a>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const status = getStatusDisplay();

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="max-w-4xl mx-auto px-4 py-4 flex justify-between items-center">
          <Button variant="link" asChild className="px-0 h-auto">
            <a href="/rounds">‚Üê –ù–∞–∑–∞–¥</a>
          </Button>
          <div className="text-right text-sm text-muted-foreground">
            <span className="font-medium text-foreground">
              {user?.username}
            </span>
            {user?.role === 'NIKITA' && (
              <Badge variant="secondary" className="ml-2">
                –û—Å–æ–±–∞—è —Ä–æ–ª—å
              </Badge>
            )}
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 py-8 space-y-8">
        <div className="text-center space-y-2">
          <h1 className={`text-3xl font-bold tracking-tight ${status.color}`}>
            {status.text}
          </h1>
          <p className="text-sm text-muted-foreground">
            –†–∞—É–Ω–¥ ID: {roundId?.slice(0, 8)}...
          </p>
        </div>

        {error && (
          <Card className="border-destructive/40">
            <CardContent className="p-4 text-sm text-destructive">
              {error}
            </CardContent>
          </Card>
        )}

        <div className="grid gap-8 lg:grid-cols-3">
          <Card className="lg:col-span-2 relative overflow-hidden">
            <CardContent className="p-8 flex flex-col items-center">
              {round.status === 'ACTIVE' ? (
                <>
                  <h2 className="text-2xl font-semibold mb-6 flex items-center gap-2">
                    üéØ <span>–¢–∞–ø–∞–π—Ç–µ –ø–æ –≥—É—Å—é!</span>
                  </h2>
                  <div className="relative inline-block">
                    {lastTapScore !== null && (
                      <div className="absolute -top-8 left-1/2 -translate-x-1/2 animate-bounce">
                        <span
                          className={`text-2xl font-bold ${lastTapScore === 10 ? 'text-yellow-600' : 'text-green-600'}`}
                        >
                          +{lastTapScore}
                        </span>
                      </div>
                    )}
                    <Button
                      variant="ghost"
                      disabled={tapping}
                      onClick={() => void handleTap()}
                      className={`text-8xl h-auto w-auto p-4 hover:scale-110 active:scale-95 transition-transform select-none ${tapping ? 'opacity-50' : ''}`}
                    >
                      ü¶Ü
                    </Button>
                  </div>
                  <div className="mt-6 space-y-1 text-center">
                    <p className="text-muted-foreground text-sm">
                      –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –≥—É—Å—é, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏!
                    </p>
                    <p className="text-xs text-muted-foreground">
                      1 –æ—á–∫–æ –∑–∞ —Ç–∞–ø ‚Ä¢ 10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π 11-–π —Ç–∞–ø
                    </p>
                  </div>
                </>
              ) : round.status === 'COOLDOWN' ? (
                <div className="text-center py-12">
                  <h2 className="text-2xl font-semibold mb-4">
                    ‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É
                  </h2>
                  <div className="text-7xl mb-6">ü¶Ü</div>
                  <p className="text-muted-foreground">
                    –†–∞—É–Ω–¥ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å —Ç–∞–ø–∞—Ç—å.
                  </p>
                </div>
              ) : (
                <div className="text-center py-12 space-y-4">
                  <h2 className="text-2xl font-semibold">üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
                  <div className="text-7xl">ü¶Ü</div>
                  {round.winner ? (
                    <>
                      <p className="text-xl font-semibold text-yellow-600">
                        üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {round.winner.username}
                      </p>
                      <p className="text-muted-foreground">
                        –°—á–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {round.winner.score} –æ—á–∫–æ–≤
                      </p>
                    </>
                  ) : (
                    <p className="text-muted-foreground">
                      –ù–∏—á—å—è! –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.
                    </p>
                  )}
                </div>
              )}
            </CardContent>
          </Card>

          <div className="space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base">üìä –ú–æ–∏ –æ—á–∫–∏</CardTitle>
                {user?.role === 'NIKITA' && (
                  <CardDescription>
                    * –í–∞—à–∏ –æ—á–∫–∏ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
                  </CardDescription>
                )}
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-4xl font-bold text-primary">
                  {round.myScore ?? 0}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base">üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
              </CardHeader>
              <CardContent className="pt-0 text-sm space-y-3">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">–í—Å–µ–≥–æ —Ç–∞–ø–æ–≤</span>
                  <span className="font-medium">{round.totalTaps}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">–û–±—â–∏–π —Å—á—ë—Ç</span>
                  <span className="font-medium">{round.totalScore}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">–°—Ç–∞—Ç—É—Å</span>
                  <span className="font-medium">
                    {round.status === 'ACTIVE'
                      ? '–ê–∫—Ç–∏–≤–µ–Ω'
                      : round.status === 'COOLDOWN'
                        ? '–û–∂–∏–¥–∞–Ω–∏–µ'
                        : '–ó–∞–≤–µ—Ä—à–µ–Ω'}
                  </span>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-muted/40">
              <CardHeader className="pb-2">
                <CardTitle className="text-base">üìú –ü—Ä–∞–≤–∏–ª–∞</CardTitle>
                <CardDescription>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</CardDescription>
              </CardHeader>
              <CardContent className="pt-0 text-xs space-y-1 text-muted-foreground">
                <p>‚Ä¢ 1 –æ—á–∫–æ –∑–∞ –∫–∞–∂–¥—ã–π —Ç–∞–ø</p>
                <p>‚Ä¢ 10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π 11-–π —Ç–∞–ø</p>
                <p>‚Ä¢ –¢–∞–ø–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ</p>
                <p>‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º</p>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
};

export default GamePage;
